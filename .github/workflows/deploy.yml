# This is a basic workflow to help you get started with Actions

name: xcube-geodb-deploy

# Controls when the action will run. 
on:
  push:
    branches:
      - master
      - dzelge*
  release:
    types:
      - created

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          python-version: 3.8
          mamba-version: "*"
          channels: conda-forge
          activate-environment: xcube_geodb
          environment-file: environment.yml

      - name: Conda info
        shell: bash -l {0}
        run: conda info

      - name: Conda info
        shell: bash -l {0}
        run: |
          python setup.py develop
          pip install codecov

      - name: Run unittests
        shell: bash -l {0}
        run: |
          py.test -v --cov=xcube_geodb
          codecov
          for f in xcube_geodb/sql/*.sql;
          do
            pgsanity $f;
          done

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # Determine release name (e.g. v1.0.0, master)
      - name: Set Release Name
        id: releasename
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_REG_USERNAME }}
          password: ${{ secrets.QUAY_REG_PASSWORD }}
      - name: Pull first
        run: docker pull quay.io/bcdev/xcube-geodb-lab:${{ steps.releasename.outputs.VERSION }}
      - name: Build and push Docker images
        uses: docker/build-push-action@v2.4.0
        with:
          push: true
          pull: true
          tags: quay.io/bcdev/xcube-geodb-lab:${{ steps.releasename.outputs.VERSION }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    runs-on: ubuntu-latest
#    needs: build
    steps:
      - name: Set Release Name
        id: releasename
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
      # Clone k8s-config to udpate versions in values-*.yml
      - name: Clone k8s-configs
        run: |
          git clone https://bcdev:${{ secrets.XCUBE_GITHUB_K8S_CONFIGS_PAT }}@github.com/bcdev/k8s-configs
          cd k8s-configs
          git checkout dzelge_xxx_geodb_jh
          git config --global user.email "bcdev@brockmann-consult.de"
          git config --global user.name "BC Dev"
      # Deploy to dev and stage for dev releases
      - name: trigger deploy dev
        if: github.event_name == 'push'
        run: |
          echo "##############################################"
          echo "Deploy dev version ${{ steps.releasename.outputs.VERSION }}"
          echo "##############################################"
          cd k8s-configs
          git checkout dzelge_xxx_geodb_jh
          sed -i -e 's/tag: [a-z0-9\.]*$/tag:  ${{ steps.releasename.outputs.VERSION }}/g' ke/helm/xcube-geodb-lab/values-stage.yaml
          git commit -a -m "Updated xcube-hub dev version to ${{ steps.releasename.outputs.VERSION }}"
      - name: Push to k8s-configs
        run: |
          cd k8s-configs
          git checkout dzelge_xxx_geodb_jh
          git push origin dzelge_xxx_geodb_jh
